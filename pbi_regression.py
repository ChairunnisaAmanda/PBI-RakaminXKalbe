# -*- coding: utf-8 -*-
"""PBI-Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HSvqKYIum3U4VBn6aFvfD4YrXnc58riI
"""

# Library untuk pengolahan data
import pandas as pd
import numpy as np

# library untuk visualisasi data
import matplotlib.pyplot as plt
import seaborn as sns

# library untuk model linear regression
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# load data dan menampilkan data
df = pd.read_csv('Dataset CCV 5 - Supervised Learning Regression.csv')
df.head()

# mendapatkan informasi data
df.info()

# membuat visualisasi sebaran data antara variable dependen salary dengan variable independen years menggunakan grafik scatterplot
plt.figure(figsize=(12,5))
sns.pairplot(df, x_vars=['Diabetasol Coklat 1 kg'], y_vars=['Daily Sales'], height=5, kind='scatter')
plt.xlabel('Diabetasol Coklat 1 kg')
plt.ylabel('Daily Sales')
plt.title('Scatterplot antara Penjualan Diabetasol Coklat dengan Total Penjualan Harian')
plt.show()

df.dropna(subset = 'Diabetasol Coklat 1 kg', inplace = True)

X = df['Diabetasol Coklat 1 kg']
X.head()

y = df['Daily Sales']
y.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.7, random_state=100)

X_train = X_train.to_numpy()
X_test = X_test.to_numpy()

X_train = X_train.reshape(X_train.shape[0],1)
X_test = X_test.reshape(X_test.shape[0],1)

# menyesuaikan garis regresi dengan sebaran data (fit)
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X_train, y_train)

# model melakukan prediksi
y_pred = lr.predict(X_test)

c = [i for i in range (1,len(y_test)+1,1)]
plt.plot(c, y_test, color='r', linestyle='-', label='Actual Data')
plt.plot(c, y_test, color='b', linestyle='-', label= 'Predicted Data')
plt.xlabel('Actual Data')
plt.ylabel('Predicted Data')
plt.legend()
plt.title('Perbandingan antara data aktual dengan data prediksi')
plt.show()

# metriks untuk evaluasi model
from sklearn.metrics import r2_score, mean_squared_error

#perhitungan mean square error
mse = mean_squared_error(y_test, y_pred)
print('mean squared error', mse)

# Intercept and coeff of the line
print('Intercept of the model:', lr.intercept_)
print('Coefficient of the line:', lr.coef_)